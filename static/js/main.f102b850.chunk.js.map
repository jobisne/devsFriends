{"version":3,"sources":["components/Card.js","components/CardList.js","components/Search.js","components/Scroll.js","components/ErrorBoundary.js","App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","key","username","Seacrh","value","handleChange","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","Error","this","setState","Component","App","onRequestRobots","searchField","isPending","filterList","filter","robot","toLocaleLowerCase","includes","Search","connect","searchDevs","requestRobots","error","dispatch","event","type","payload","target","fetch","then","res","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","rootReducers","combineReducers","action","console","log","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f102b850.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n      <img alt=\"robots\" src={` https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots}) => {\n  // if (true){\n  //   throw new Error('oooooop errro occur');\n  // }\n  const card = robots.map((user) => (\n    <Card key={user.id} id={user.id} name={user.username} email={user.email} />\n  ));\n  return card;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Seacrh = ({ value, handleChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        value={value}\n        placeholder='search friend'\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default Seacrh;\n","import React from 'react';\n\nconst Scroll = props =>{\n    return (\n        <div style={{ overflow: 'auto', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n\n    )\n}\n\nexport default Scroll\n","import React, { Component } from 'react';\n\n\nclass ErrorBoundary extends Component{\n    constructor(){\n        super()\n        this.state = {\n            Error: false\n        }\n    }\n    componentDidCatch(){\n        //ComponentdidCatch run like try and catch\n        //it will run where there is an error\n        this.setState({ Error: true })\n    }\n\n    render(){\n        if (this.state.Error) {\n            return <h1> oooops. There an error</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from \"react\";\n// import { robots } from \"./robots\";\nimport { connect } from \"react-redux\";\nimport CardList from \"./components/CardList\";\nimport Search from \"./components/Search\";\nimport Scroll from \"./components/Scroll\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\nimport { setSearchField, requestRobots } from \"./actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchDevs.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    handleChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots:() => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     robots: [],\n  //   };\n  // }\n\n  componentDidMount() {\n\n    this.props.onRequestRobots();\n\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\n    //   .then((res) => res.json())\n    //   .then((user) => {\n    //     this.setState({ robots: user });\n    //   });\n  }\n  // handleChange = (event) => {\n  //   this.setState({ searchField: event.target.value });\n  // };\n\n  render() {\n    // const { robots } = this.state;\n    const { searchField, handleChange, robots, isPending } = this.props\n\n    const filterList = robots.filter((robot) => {\n      return robot.username\n        .toLocaleLowerCase()\n        .includes(searchField.toLocaleLowerCase());\n    });\n    return isPending ? (\n      <div>\n        <h1>LOADING</h1>\n      </div>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">MYDEVSFRIENDS</h1>\n        <Search value={searchField} handleChange={handleChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filterList} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n    CHANGE_SEARCH_FIELD,\n    ROBOT_REQUEST_PENDING,\n    ROBOT_REQUEST_SUCCESS,\n    ROBOT_REQUEST_FAILED\n} from './constants';\n\nexport const setSearchField = text => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: ROBOT_REQUEST_PENDING });\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then( data => dispatch({type: ROBOT_REQUEST_SUCCESS, payload: data }))\n      .catch( error => dispatch({ type: ROBOT_REQUEST_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const ROBOT_REQUEST_PENDING = 'ROBOT_REQUEST_PENDING';\n\nexport const ROBOT_REQUEST_SUCCESS = 'ROBOT_REQUEST_SUCCESS';\n\nexport const ROBOT_REQUEST_FAILED = 'ROBOT_REQUEST_FAILED';\n","import { \n    CHANGE_SEARCH_FIELD,\n    ROBOT_REQUEST_PENDING,\n    ROBOT_REQUEST_SUCCESS,\n    ROBOT_REQUEST_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchDevs = (state=initialStateSearch, action={}) => {\n    console.log(action.type);\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state\n    }\n  \n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case ROBOT_REQUEST_PENDING:\n            return Object.assign({}, state, {isPending: true} );\n        case ROBOT_REQUEST_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\n        case ROBOT_REQUEST_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default:\n            return state\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider, } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"tachyons\";\nimport { searchDevs,requestRobots } from \"./reducers\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nconst rootReducers = combineReducers({ searchDevs, requestRobots })\n\nconst logger = createLogger();\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}